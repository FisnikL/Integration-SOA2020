version: "3"
services:

  prometheus:
    container_name: prometheus-svc
    image: prom/prometheus
    ports:
      - "9090:9090"
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./Logging-and-Monitoring/prometheus.yaml:/etc/prometheus/prometheus.yaml

  grafana:
    image: grafana/grafana:6.7.0
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  grafana-dashboards:
    image: alpine:3.10
    depends_on:
      - grafana
    volumes:
      - ./Logging-and-Monitoring/grafana-data:/grafana
    command: >
      /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources.json
        curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.1
    ports:
      - "5601:5601"
    volumes:
      - ./Logging-and-Monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.6.1
    ports:
      - "9600:9600"
      - "9500:9500"
    volumes:
      - ./Logging-and-Monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./Logging-and-Monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./Logging-and-Monitoring/logs:/usr/share/logstash/logs
    depends_on:
      - elasticsearch

  consul:
    image: consul
    container_name: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    restart: always

  registrator:
    container_name: registrator
    image: gliderlabs/registrator:master
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    command: consul://consul:8500
    restart: always
    depends_on:
      - consul

