version: "3"
services:

  prometheus:
    container_name: prometheus-svc
    image: prom/prometheus:master
    ports:
      - "9090:9090"
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ../Logging-and-Monitoring/prometheus.yaml:/etc/prometheus/prometheus.yaml

  grafana:
    image: grafana/grafana:6.7.0
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  grafana-dashboards:
    image: alpine:3.10
    depends_on:
      - grafana
    volumes:
      - ../Logging-and-Monitoring/grafana-data:/grafana
    command: >
      /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources.json
        curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.1
    ports:
      - "5601:5601"
    volumes:
      - ../Logging-and-Monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.6.1
    ports:
      - "9600:9600"
      - "9500:9500"
    volumes:
      - ../Logging-and-Monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ../Logging-and-Monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ../Logging-and-Monitoring/logs:/usr/share/logstash/logs
    depends_on:
      - elasticsearch

  consul:
    image: consul
    container_name: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    restart: always

  registrator:
    container_name: registrator
    image: gliderlabs/registrator:master
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    command: consul://consul:8500
    restart: always
    depends_on:
      - consul

  emqx:
    image: emqx/emqx:v4.1-rc.2
    volumes:
#      - ./soa-mqtt/emqx-data:/opt/emqx/data
#      - ./soa-mqtt/emqx-lib:/opt/emqx/lib
      - ../soa-mqtt/emqx/http/emqx_auth_http.conf:/opt/emqx/etc/plugins/emqx_auth_http.conf
    ports:
#      - 1883:1883
#      - 8083:8083
#      - 18083:18083
      - 8080:8080
    depends_on:
      - auth-service
    environment:
      EMQX_ALLOW_ANONYMOUS: "false"
      EMQX_LOADED_PLUGINS: "emqx_recon,emqx_retainer,emqx_management,emqx_dashboard,emqx_auth_http"

  auth-service:
    build:
      context: ../soa-mqtt/auth-service
    stdin_open: true
    tty: true
#    ports:
#      - 8000:8000
    container_name: auth-service
    image: auth-service

  kong-db:
    image: postgres:11-alpine
    volumes:
      - ../kong-konga-keycloak/kong-datastore:/var/lib/postgresql/data
#    networks:
#      - kong-net
#    ports:
#      - "15432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB:       api-gw
      POSTGRES_USER:     kong
      POSTGRES_PASSWORD: kong
    restart: on-failure

  kong-session-store:
    image: redis
#    ports:
#      - 6379:6379
    restart: on-failure

  kong:
    build:
      context: ../kong-konga-keycloak/
    image: kong:2.0.0-alpine-oidc
    depends_on:
      - kong-db
      - kong-session-store
#    networks:
#      - kong-net
    ports:
      - "8000:8000" # Listener
      - "8001:8001" # Admin API
#      - "8443:8443" # Listener  (SSL)
#      - "8444:8444" # Admin API (SSL)
    environment:
      KONG_NGINX_PROXY_INCLUDE: ./nginx-redis.kong.conf
      KONG_DATABASE:         postgres
      KONG_PG_HOST:          kong-db
      KONG_PG_PORT:          5432
      KONG_PG_USER:          kong
      KONG_PG_PASSWORD:      kong
      KONG_PG_DATABASE:      api-gw
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG:  /dev/stderr
      KONG_ADMIN_ERROR_LOG:  /dev/stderr
      KONG_PROXY_LISTEN:     0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN:     0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PLUGINS:          bundled,oidc,cookies-to-headers
      KONG_LOG_LEVEL:        debug
    restart: on-failure

  konga:
    image: pantsel/konga:0.14.7
    depends_on:
      - kong
#    networks:
#      - kong-net
    ports:
      - "1337:1337" # konga
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-db
      DB_PORT: '5432'
      DB_USER: kong
      DB_DATABASE: api-gw
      NODE_ENV: development
    restart: on-failure

  keycloak-db:
    image: postgres:11-alpine
    volumes:
      - ../kong-konga-keycloak/keycloak-datastore:/var/lib/postgresql/data
#    networks:
#      - keycloak-net
#    ports:
#      - "25432:5432"
    environment:
      POSTGRES_DB:       keycloak
      POSTGRES_USER:     keycloak
      POSTGRES_PASSWORD: password
    restart: on-failure

  keycloak:
    image: jboss/keycloak:8.0.1
    depends_on:
      - keycloak-db
#    networks:
#      - keycloak-net
    ports:
      - "8180:8080"
    environment:
      DB_VENDOR:   POSTGRES
      DB_ADDR:     keycloak-db
      DB_PORT:     5432
      DB_DATABASE: keycloak
      DB_USER:     keycloak
      DB_PASSWORD: password
      # Not needed because set in init.sh
      #KEYCLOAK_USER:     admin
      #KEYCLOAK_PASSWORD: admin
    restart: on-failure

  mailhog:
    image: mailhog/mailhog:v1.0.0
#    ports:
#      - 1025:1025
#      - 8025:8025
    restart: on-failure

  users:
    build:
      context: ../kong-konga-keycloak/Users
    stdin_open: true
    tty: true
    image: users-fastapi:latest
    depends_on:
      - keycloak
    ports:
      - "3000:80"
    environment:
      MODULE_NAME: users
      DOCKER_HOST: 192.168.37.138
      SERVICE_3000_CHECK_HTTP: "/"
      SERVICE_3000_CHECK_INTERVAL: "15s"
      SERVICE_3000_CHECK_TIMEOUT: "1s"
      SERVICE_3000_CHECK_DEREGISTER_AFTER: "10m"
    restart: on-failure

  postgres-im:
    image: postgres:12
    environment:
      POSTGRES_PASSWORD: instancemanager
    volumes:
      - ../SOA/db/init:/docker-entrypoint-initdb.d
      - ../SOA/db/data:/var/lib/postgresql/data
    restart: always

  instancemanager:
    build:
      context: ../SOA
    ports:
      - 30001:5000
    depends_on:
      - postgres-im
      - emqx
    restart: always

  clientapp1:
    build:
      context: ../ServerHelper-ClientApp
    depends_on:
      - emqx
    environment:
      - CLIENTAPP_USER_ID=client1

  referraldb:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'referral'
      MYSQL_USER: 'referral'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password12345'
    volumes:
      - ../referral/db:/var/lib/mysql
  referral:
    build:
      context: ../referral
    depends_on:
      - referraldb
    ports:
      - 25000:5050
